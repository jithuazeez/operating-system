#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<unistd.h>
#include<pthread.h>
#include<sys/wait.h>

#define MIN_PID 100
#define MAX_PID 1000
struct a
{
	int i;
}arg;
  
int pid[MAX_PID-MIN_PID]={0};
pthread_mutex_t p;

int allocate_pid(void){
    int i,flag=1;
    for(i=0; i<(MAX_PID-MIN_PID); i++){
        if(pid[i]==0){
           pthread_mutex_lock(&p);
             pid[i]=1;
            flag=0;
            pthread_mutex_unlock(&p);
            break;
        }
    }
    return flag?-1:i;
    void release_pid(int id){
    pid[id]=0;
}
void *threadRoutine(void *arg){
    struct a*args = arg;
    int tid = args->i;
    
    //get a pid
    int id = allocate_pid();
//printf("%d",id);

    if(id==-1){
        puts("No PID available.");
    }
    else{
    	//printf("%d",tid);
        printf("Thread [%d] PID [%3d] Allocated\n",tid,id+MIN_PID);
        //sleep for a random time between 1-10 seconds
        
        int r=1+rand()%30;
        //uncomment next line to make the thread sleep for a random time
        sleep(r);

        printf("Thread [%3d] PID [%3d] Released after %d sec\n",tid,id+MIN_PID,r);
        release_pid(id);
    }
    pthread_exit(NULL);
}
